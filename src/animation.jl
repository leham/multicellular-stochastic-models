"""
Produce animation of a multicellular system, where each cell contains a toggle triad.
"""

using Luxor, FFMPEG

# Colormaps 
pink_col = cgrad(:cyclic_mrybm_35_75_c68_n256, 256)[1]
const cc_single_default = cgrad([weighted_color_mean(0.4, pink_col, light_gray_col), pink_col])
const cc_default = RGBA.(cgrad(:cyclic_mrybm_35_75_c68_n256, 256))

colorise_prot(n::Number, nmax::Real; inactive_col=light_gray_col, cmap=cc_single_default) = iszero(n) ? inactive_col : cmap[min(1, n/nmax)]

# Colouring idea courtesy of Kaan Öcal
function colorise_prot(_data::Tuple, nmax::Real; inactive_col=light_gray_col, cmap=cc_default)
    all(iszero.(_data)) && return inactive_col

    data = _data .+ 1e-6
    n = length(data)
    ω = exp(2im * pi/n)
    weights = ω .^ (0:n-1)
    z = sum(data .* weights)
    
    arg = angle(z) / (2*pi)
    arg <= 0 && (arg += 1)
    
    idx = floor(Int, length(cmap) * arg)
    sat = min(1, abs(z) / nmax)
    sat = 0.3 * sat + 0.7 # make the saturation much more marginal
    
    weighted_color_mean(sat, cmap[mod1(1+idx, 256)], gray_col)
end


# Helper function used to offset the hexagonal grid of cells for more intuitive plotting purposes
function hexcorrect!(mat::AbstractMatrix)
    n, m = size(mat)
    for i in 1:n
        row = view(mat, i, :)
        if iseven(i)
            circshift!(row, Int(mod(i/2, m)-1))
        else
            circshift!(row, Int(mod((i + 1)/2, m)-1))
        end
    end
    return nothing
end

hex_correct(i, j, m) = i, mod(j - ceil(Int, i/2), m) + 1

get_nmax(protein_vec::Tuple) = maximum(protein_vec)
get_nmax(cells::AbstractMatrix{<:Tuple}) = maximum(get_nmax.(cells))
get_nmax(cells::AbstractMatrix{<:Number}) = maximum(cells)
get_nmax(frames::AbstractVector{<:Matrix}) = maximum(get_nmax.(frames)) 

function fast_animation(frames::AbstractVector; 
                        cmap=nothing,
                        bckgrd_col=light_gray_col,
                        fname="animation1.gif", fps=10, scale_size=2.5)
    
    nmax = get_nmax(frames)
    n, m = size(frames[1])
    colorise(x) = isnothing(cmap) ? colorise_prot(x, nmax) : colorise_prot(x, nmax; cmap)

    fig = CairoMakie.Figure(size=(size_pt[1]*scale_size*(m/n), size_pt[1]*scale_size), aspect=n/m, background_color=bckgrd_col)
    ax = Axis(fig[1, 1],
              xticksvisible=false, yticksvisible=false,
              xticklabelsvisible=false, yticklabelsvisible=false,
              spinewidth=0)

    rr = record(fig, fname, eachindex(frames); framerate=fps) do i
        config = copy(frames[i])
        hexcorrect!(config)
        img_prot = map(nprot -> colorise(nprot), config)
        image!(ax, transpose(img_prot), interpolate=false)
    end

    return rr
end


function hex_animation(frames::AbstractVector;
                       hexsize=1, marginsize=10, 
                       bckgrd_col=gray_col,
                       cmap=nothing,
                       creategif=true, createmovie=false,
                       fname="animation1.gif", fps=10,
                       tempdirectory="")
    
    nmax = get_nmax(frames)
    nframes = length(frames)
    colorise(x) = isnothing(cmap) ? colorise_prot(x, nmax) : colorise_prot(x, nmax; cmap)
    
    # hexagonal grid sizing
    xsize = round(hexsize * sqrt(3) * (m + 1))
    ysize = round(hexsize * 3/2 * (n + 1))

    # create Luxor movie
    demo = Movie(xsize+marginsize, ysize+marginsize, "matrix", 1:nframes)
    
    function frame(scene, framenumber)
        config = frames[framenumber]
        background(bckgrd_col)
        for i in 1:n, j in 1:m
            pgon = Luxor.hextile(HexagonOffsetEvenR(j - Int(m/2), i - Int(n/2), hexsize))
            pgon = pgon .- Luxor.Point(hexsize * 0.5, hexsize * 0.75)
            q, r = hex_correct(i, j, m)
            nprot = config[q, r]
            sethue(colorise(nprot))
            Luxor.poly(pgon, :fill)
        end
    end

    # taken directly from Luxor.jl source code
    # rewriting it to have more flexibility over .mp4 compilation
    if tempdirectory == ""
        tempdirectory = mktempdir()
    else
        if !isdir(tempdirectory)
            @info "$(tempdirectory) does not exist, using an autogenerated one."
            tempdirectory = mktempdir()
        end
    end
    @info("Frames for animation are being stored in directory: \n\t $(tempdirectory)")

    res = Luxor.animate(demo, Luxor.Scene(demo, frame, 1:nframes);
                        creategif,
                        framerate=fps,
                        pathname=fname,
                        tempdirectory=tempdirectory)

    # custom ffmpeg set of commands for stability
    if createmovie
        FFMPEG.ffmpeg_exe(`-framerate $fps -f image2 -i $(tempdirectory)/%10d.png -r $fps -c:v hevc_videotoolbox -q:v 65 -tag:v hvc1 -pix_fmt yuv420p -y $fname`)
    end

    res
end